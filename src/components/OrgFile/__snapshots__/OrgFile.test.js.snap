// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering an org file <OrgFile /> renders an org file 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(OrgFile)
        path="/some/test/file"
      >
        <OrgFile
          activePopupData={null}
          activePopupType={null}
          base={
            Object {
              "activatePopup": [Function],
              "clearModalStack": [Function],
              "closePopup": [Function],
              "hideLoadingMessage": [Function],
              "loadStaticFile": [Function],
              "popModalPage": [Function],
              "pushModalPage": [Function],
              "restoreBaseSettings": [Function],
              "setAgendaDefaultDeadlineDelayUnit": [Function],
              "setAgendaDefaultDeadlineDelayValue": [Function],
              "setBulletStyle": [Function],
              "setCustomKeybinding": [Function],
              "setDisappearingLoadingMessage": [Function],
              "setFontSize": [Function],
              "setHasUnseenChangelog": [Function],
              "setIsLoading": [Function],
              "setLastSeenChangelogHeader": [Function],
              "setLastViewedFile": [Function],
              "setLoadingMessage": [Function],
              "setShouldLiveSync": [Function],
              "setShouldStoreSettingsInSyncBackend": [Function],
              "setShouldTapTodoToAdvance": [Function],
              "unloadStaticFile": [Function],
            }
          }
          capture={
            Object {
              "addNewEmptyCaptureTemplate": [Function],
              "addNewTemplateHeaderPath": [Function],
              "addNewTemplateOrgFileAvailability": [Function],
              "deleteTemplate": [Function],
              "removeTemplateHeaderPath": [Function],
              "removeTemplateOrgFileAvailability": [Function],
              "reorderCaptureTemplate": [Function],
              "restoreCaptureSettings": [Function],
              "updateTemplateFieldPathValue": [Function],
            }
          }
          captureTemplates={
            Array [
              Immutable.List [
                Immutable.Map {
                  "headerPaths": Immutable.List [
                    "Capture",
                    "Groceries",
                  ],
                  "iconName": "lemon",
                  "letter": "",
                  "isAvailableInAllOrgFiles": false,
                  "isSample": true,
                  "orgFilesWhereAvailable": Immutable.List [],
                  "template": "* TODO %?",
                  "id": 1,
                  "shouldPrepend": false,
                  "description": "Groceries",
                },
                Immutable.Map {
                  "headerPaths": Immutable.List [
                    "Capture",
                    "Deeply",
                    "Nested",
                    "Headers",
                    "Work",
                    "Too!",
                  ],
                  "iconName": "fighter-jet",
                  "letter": "",
                  "isAvailableInAllOrgFiles": false,
                  "isSample": true,
                  "orgFilesWhereAvailable": Immutable.List [],
                  "template": "* You can insert timestamps too! %T %?",
                  "id": 2,
                  "shouldPrepend": true,
                  "description": "Deeply nested header",
                },
              ],
            ]
          }
          customKeybindings={Immutable.Map {}}
          headers={
            Immutable.List [
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "Top level header",
                    },
                  ],
                  "rawTitle": "Top level header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 19,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A nested header",
                    },
                  ],
                  "rawTitle": "A nested header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 20,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A todo item",
                    },
                  ],
                  "rawTitle": "A todo item",
                  "todoKeyword": "TODO",
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 21,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A finished todo item",
                    },
                  ],
                  "rawTitle": "A finished todo item",
                  "todoKeyword": "DONE",
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 22,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "Another top level header",
                    },
                  ],
                  "rawTitle": "Another top level header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "Some description content",
                "description": Immutable.List [
                  Immutable.Map {
                    "type": "text",
                    "contents": "Some description content",
                  },
                ],
                "opened": false,
                "id": 23,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A header with tags                                              ",
                    },
                  ],
                  "rawTitle": "A header with tags                                              ",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [
                    "tag1",
                    "tag2",
                  ],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 24,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A header with ",
                    },
                    Immutable.Map {
                      "id": 25,
                      "type": "link",
                      "contents": Immutable.Map {
                        "uri": "https://google.com",
                        "title": "a link",
                      },
                    },
                  ],
                  "rawTitle": "A header with [[https://google.com][a link]]",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 26,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
            ]
          }
          inEditMode={false}
          loadedPath="/some/test/file"
          org={
            Object {
              "addHeader": [Function],
              "addHeaderAndEdit": [Function],
              "addNewPlanningItem": [Function],
              "addNewTableColumn": [Function],
              "addNewTableRow": [Function],
              "advanceCheckboxState": [Function],
              "advanceTodoState": [Function],
              "applyOpennessState": [Function],
              "clearPendingCapture": [Function],
              "displayFile": [Function],
              "enterEditMode": [Function],
              "exitEditMode": [Function],
              "focusHeader": [Function],
              "insertCapture": [Function],
              "insertPendingCapture": [Function],
              "moveHeaderDown": [Function],
              "moveHeaderLeft": [Function],
              "moveHeaderRight": [Function],
              "moveHeaderUp": [Function],
              "moveSubtreeLeft": [Function],
              "moveSubtreeRight": [Function],
              "moveTableColumnLeft": [Function],
              "moveTableColumnRight": [Function],
              "moveTableRowDown": [Function],
              "moveTableRowUp": [Function],
              "noOp": [Function],
              "openHeader": [Function],
              "removeHeader": [Function],
              "removeTableColumn": [Function],
              "removeTableRow": [Function],
              "reorderPropertyList": [Function],
              "reorderTags": [Function],
              "selectHeader": [Function],
              "selectHeaderAndOpenParents": [Function],
              "selectNextSiblingHeader": [Function],
              "selectNextVisibleHeader": [Function],
              "selectPreviousVisibleHeader": [Function],
              "setDirty": [Function],
              "setHeaderTags": [Function],
              "setLastSyncAt": [Function],
              "setOrgFileErrorMessage": [Function],
              "setSelectedTableCellId": [Function],
              "stopDisplayingFile": [Function],
              "sync": [Function],
              "toggleHeaderOpened": [Function],
              "unfocusHeader": [Function],
              "updateHeaderDescription": [Function],
              "updateHeaderTitle": [Function],
              "updatePlanningItemTimestamp": [Function],
              "updatePropertyListItems": [Function],
              "updateTableCellValue": [Function],
              "updateTimestampWithId": [Function],
            }
          }
          path="/some/test/file"
          syncBackend={
            Object {
              "downloadFile": [Function],
              "getDirectoryListing": [Function],
              "loadMoreDirectoryListing": [Function],
              "pushBackup": [Function],
              "setCurrentFileBrowserDirectoryListing": [Function],
              "setIsLoadingMoreDirectoryListing": [Function],
              "signOut": [Function],
            }
          }
          undo={
            Object {
              "clearHistory": [Function],
              "jump": [Function],
              "jumpToFuture": [Function],
              "jumpToPast": [Function],
              "redo": [Function],
              "undo": [Function],
            }
          }
        >
          <HotKeys
            handlers={
              Object {
                "addHeader": [Function],
                "advanceTodo": [Function],
                "editDescription": [Function],
                "editTitle": [Function],
                "exitEditMode": [Function],
                "moveHeaderDown": [Function],
                "moveHeaderLeft": [Function],
                "moveHeaderRight": [Function],
                "moveHeaderUp": [Function],
                "removeHeader": [Function],
                "selectNextVisibleHeader": [Function],
                "selectPreviousVisibleHeader": [Function],
                "toggleHeaderOpened": [Function],
                "undo": [Function],
              }
            }
            keyMap={
              Object {
                "addHeader": "ctrl+enter",
                "advanceTodo": "ctrl+t",
                "editDescription": "ctrl+d",
                "editTitle": "ctrl+h",
                "exitEditMode": "command+enter",
                "moveHeaderDown": "ctrl+command+n",
                "moveHeaderLeft": "ctrl+command+b",
                "moveHeaderRight": "ctrl+command+f",
                "moveHeaderUp": "ctrl+command+p",
                "removeHeader": "backspace",
                "selectNextVisibleHeader": "ctrl+n",
                "selectPreviousVisibleHeader": "ctrl+p",
                "toggleHeaderOpened": "tab",
                "undo": "ctrl+shift+-",
              }
            }
          >
            <FocusTrap
              component="div"
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <div
                onBlur={[Function]}
                onFocus={[Function]}
                tabIndex="-1"
              >
                <div
                  className="org-file-container"
                  tabIndex="-1"
                >
                  <Connect(HeaderList)>
                    <HeaderList
                      headers={
                        Immutable.List [
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Top level header",
                                },
                              ],
                              "rawTitle": "Top level header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 19,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A nested header",
                                },
                              ],
                              "rawTitle": "A nested header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 20,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A todo item",
                                },
                              ],
                              "rawTitle": "A todo item",
                              "todoKeyword": "TODO",
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 21,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A finished todo item",
                                },
                              ],
                              "rawTitle": "A finished todo item",
                              "todoKeyword": "DONE",
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 22,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Another top level header",
                                },
                              ],
                              "rawTitle": "Another top level header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "Some description content",
                            "description": Immutable.List [
                              Immutable.Map {
                                "type": "text",
                                "contents": "Some description content",
                              },
                            ],
                            "opened": false,
                            "id": 23,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A header with tags                                              ",
                                },
                              ],
                              "rawTitle": "A header with tags                                              ",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [
                                "tag1",
                                "tag2",
                              ],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 24,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A header with ",
                                },
                                Immutable.Map {
                                  "id": 25,
                                  "type": "link",
                                  "contents": Immutable.Map {
                                    "uri": "https://google.com",
                                    "title": "a link",
                                  },
                                },
                              ],
                              "rawTitle": "A header with [[https://google.com][a link]]",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 26,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                        ]
                      }
                    >
                      <div
                        className="header-list-container"
                      >
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={true}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Top level header",
                                  },
                                ],
                                "rawTitle": "Top level header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 19,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="19"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={true}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "Top level header",
                                    },
                                  ],
                                  "rawTitle": "Top level header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 19,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={true}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Top level header",
                                          },
                                        ],
                                        "rawTitle": "Top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 19,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={true}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Top level header",
                                            },
                                          ],
                                          "rawTitle": "Top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 19,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "Top level header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              Top level header
                                            </span>
                                          </_default>
                                          ...
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Top level header",
                                          },
                                        ],
                                        "rawTitle": "Top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 19,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Top level header",
                                            },
                                          ],
                                          "rawTitle": "Top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 19,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={true}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Another top level header",
                                  },
                                ],
                                "rawTitle": "Another top level header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "Some description content",
                              "description": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Some description content",
                                },
                              ],
                              "opened": false,
                              "id": 23,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="23"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={true}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "Another top level header",
                                    },
                                  ],
                                  "rawTitle": "Another top level header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "Some description content",
                                "description": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Some description content",
                                  },
                                ],
                                "opened": false,
                                "id": 23,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={true}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Another top level header",
                                          },
                                        ],
                                        "rawTitle": "Another top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "Some description content",
                                      "description": Immutable.List [
                                        Immutable.Map {
                                          "type": "text",
                                          "contents": "Some description content",
                                        },
                                      ],
                                      "opened": false,
                                      "id": 23,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={true}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Another top level header",
                                            },
                                          ],
                                          "rawTitle": "Another top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "Some description content",
                                        "description": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Some description content",
                                          },
                                        ],
                                        "opened": false,
                                        "id": 23,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "Another top level header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              Another top level header
                                            </span>
                                          </_default>
                                          ...
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Another top level header",
                                          },
                                        ],
                                        "rawTitle": "Another top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "Some description content",
                                      "description": Immutable.List [
                                        Immutable.Map {
                                          "type": "text",
                                          "contents": "Some description content",
                                        },
                                      ],
                                      "opened": false,
                                      "id": 23,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Another top level header",
                                            },
                                          ],
                                          "rawTitle": "Another top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "Some description content",
                                        "description": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Some description content",
                                          },
                                        ],
                                        "opened": false,
                                        "id": 23,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A header with tags                                              ",
                                  },
                                ],
                                "rawTitle": "A header with tags                                              ",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [
                                  "tag1",
                                  "tag2",
                                ],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 24,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="24"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A header with tags                                              ",
                                    },
                                  ],
                                  "rawTitle": "A header with tags                                              ",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 24,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with tags                                              ",
                                          },
                                        ],
                                        "rawTitle": "A header with tags                                              ",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [
                                          "tag1",
                                          "tag2",
                                        ],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 24,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with tags                                              ",
                                            },
                                          ],
                                          "rawTitle": "A header with tags                                              ",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [
                                            "tag1",
                                            "tag2",
                                          ],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 24,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A header with tags                                              ",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A header with tags                                              
                                            </span>
                                          </_default>
                                        </span>
                                        <div>
                                          <div
                                            className="header-tag"
                                            key="tag1"
                                          >
                                            tag1
                                          </div>
                                          <div
                                            className="header-tag"
                                            key="tag2"
                                          >
                                            tag2
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with tags                                              ",
                                          },
                                        ],
                                        "rawTitle": "A header with tags                                              ",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [
                                          "tag1",
                                          "tag2",
                                        ],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 24,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with tags                                              ",
                                            },
                                          ],
                                          "rawTitle": "A header with tags                                              ",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [
                                            "tag1",
                                            "tag2",
                                          ],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 24,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A header with ",
                                  },
                                  Immutable.Map {
                                    "id": 25,
                                    "type": "link",
                                    "contents": Immutable.Map {
                                      "uri": "https://google.com",
                                      "title": "a link",
                                    },
                                  },
                                ],
                                "rawTitle": "A header with [[https://google.com][a link]]",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 26,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="26"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A header with ",
                                    },
                                    Immutable.Map {
                                      "id": 25,
                                      "type": "link",
                                      "contents": Immutable.Map {
                                        "uri": "https://google.com",
                                        "title": "a link",
                                      },
                                    },
                                  ],
                                  "rawTitle": "A header with [[https://google.com][a link]]",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 26,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with ",
                                          },
                                          Immutable.Map {
                                            "id": 25,
                                            "type": "link",
                                            "contents": Immutable.Map {
                                              "uri": "https://google.com",
                                              "title": "a link",
                                            },
                                          },
                                        ],
                                        "rawTitle": "A header with [[https://google.com][a link]]",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 26,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with ",
                                            },
                                            Immutable.Map {
                                              "id": 25,
                                              "type": "link",
                                              "contents": Immutable.Map {
                                                "uri": "https://google.com",
                                                "title": "a link",
                                              },
                                            },
                                          ],
                                          "rawTitle": "A header with [[https://google.com][a link]]",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 26,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A header with ",
                                                },
                                                Immutable.Map {
                                                  "id": 25,
                                                  "type": "link",
                                                  "contents": Immutable.Map {
                                                    "uri": "https://google.com",
                                                    "title": "a link",
                                                  },
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A header with 
                                              <a
                                                href="https://google.com"
                                                key="25"
                                                rel="noopener noreferrer"
                                                target="_blank"
                                              >
                                                a link
                                              </a>
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with ",
                                          },
                                          Immutable.Map {
                                            "id": 25,
                                            "type": "link",
                                            "contents": Immutable.Map {
                                              "uri": "https://google.com",
                                              "title": "a link",
                                            },
                                          },
                                        ],
                                        "rawTitle": "A header with [[https://google.com][a link]]",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 26,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with ",
                                            },
                                            Immutable.Map {
                                              "id": 25,
                                              "type": "link",
                                              "contents": Immutable.Map {
                                                "uri": "https://google.com",
                                                "title": "a link",
                                              },
                                            },
                                          ],
                                          "rawTitle": "A header with [[https://google.com][a link]]",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 26,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                      </div>
                    </HeaderList>
                  </Connect(HeaderList)>
                  <Connect(ActionDrawer)>
                    <ActionDrawer
                      base={
                        Object {
                          "activatePopup": [Function],
                          "clearModalStack": [Function],
                          "closePopup": [Function],
                          "hideLoadingMessage": [Function],
                          "loadStaticFile": [Function],
                          "popModalPage": [Function],
                          "pushModalPage": [Function],
                          "restoreBaseSettings": [Function],
                          "setAgendaDefaultDeadlineDelayUnit": [Function],
                          "setAgendaDefaultDeadlineDelayValue": [Function],
                          "setBulletStyle": [Function],
                          "setCustomKeybinding": [Function],
                          "setDisappearingLoadingMessage": [Function],
                          "setFontSize": [Function],
                          "setHasUnseenChangelog": [Function],
                          "setIsLoading": [Function],
                          "setLastSeenChangelogHeader": [Function],
                          "setLastViewedFile": [Function],
                          "setLoadingMessage": [Function],
                          "setShouldLiveSync": [Function],
                          "setShouldStoreSettingsInSyncBackend": [Function],
                          "setShouldTapTodoToAdvance": [Function],
                          "unloadStaticFile": [Function],
                        }
                      }
                      capture={
                        Object {
                          "addNewEmptyCaptureTemplate": [Function],
                          "addNewTemplateHeaderPath": [Function],
                          "addNewTemplateOrgFileAvailability": [Function],
                          "deleteTemplate": [Function],
                          "removeTemplateHeaderPath": [Function],
                          "removeTemplateOrgFileAvailability": [Function],
                          "reorderCaptureTemplate": [Function],
                          "restoreCaptureSettings": [Function],
                          "updateTemplateFieldPathValue": [Function],
                        }
                      }
                      captureTemplates={Array []}
                      inEditMode={false}
                      isFocusedHeaderActive={false}
                      org={
                        Object {
                          "addHeader": [Function],
                          "addHeaderAndEdit": [Function],
                          "addNewPlanningItem": [Function],
                          "addNewTableColumn": [Function],
                          "addNewTableRow": [Function],
                          "advanceCheckboxState": [Function],
                          "advanceTodoState": [Function],
                          "applyOpennessState": [Function],
                          "clearPendingCapture": [Function],
                          "displayFile": [Function],
                          "enterEditMode": [Function],
                          "exitEditMode": [Function],
                          "focusHeader": [Function],
                          "insertCapture": [Function],
                          "insertPendingCapture": [Function],
                          "moveHeaderDown": [Function],
                          "moveHeaderLeft": [Function],
                          "moveHeaderRight": [Function],
                          "moveHeaderUp": [Function],
                          "moveSubtreeLeft": [Function],
                          "moveSubtreeRight": [Function],
                          "moveTableColumnLeft": [Function],
                          "moveTableColumnRight": [Function],
                          "moveTableRowDown": [Function],
                          "moveTableRowUp": [Function],
                          "noOp": [Function],
                          "openHeader": [Function],
                          "removeHeader": [Function],
                          "removeTableColumn": [Function],
                          "removeTableRow": [Function],
                          "reorderPropertyList": [Function],
                          "reorderTags": [Function],
                          "selectHeader": [Function],
                          "selectHeaderAndOpenParents": [Function],
                          "selectNextSiblingHeader": [Function],
                          "selectNextVisibleHeader": [Function],
                          "selectPreviousVisibleHeader": [Function],
                          "setDirty": [Function],
                          "setHeaderTags": [Function],
                          "setLastSyncAt": [Function],
                          "setOrgFileErrorMessage": [Function],
                          "setSelectedTableCellId": [Function],
                          "stopDisplayingFile": [Function],
                          "sync": [Function],
                          "toggleHeaderOpened": [Function],
                          "unfocusHeader": [Function],
                          "updateHeaderDescription": [Function],
                          "updateHeaderTitle": [Function],
                          "updatePlanningItemTimestamp": [Function],
                          "updatePropertyListItems": [Function],
                          "updateTableCellValue": [Function],
                          "updateTimestampWithId": [Function],
                        }
                      }
                      path="/some/test/file"
                    >
                      <div
                        className="action-drawer-container nice-scroll"
                      >
                        <ActionButton
                          iconName="cloud"
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          subIconName="sync-alt"
                          tooltip="Sync changes"
                        >
                          <button
                            className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud action-drawer__btn--with-sub-icon"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                            title="Sync changes"
                          >
                            <i
                              className="fas fa-xs fa-sync-alt action-drawer__btn__sub-icon"
                            />
                          </button>
                        </ActionButton>
                        <Motion
                          style={
                            Object {
                              "bottomRowYOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "centerXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "firstColumnXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "secondColumnXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "topRowYOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                            }
                          }
                        >
                          <div
                            className="action-drawer__arrow-buttons-container"
                            style={
                              Object {
                                "left": 0,
                              }
                            }
                          >
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-up"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header up"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-up"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                  }
                                }
                                title="Move header up"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-down"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header down"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-down"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                  }
                                }
                                title="Move header down"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-left"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                  "right": 0,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header left"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-left"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                    "right": 0,
                                  }
                                }
                                title="Move header left"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-right"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "left": 0,
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header right"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-right"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "left": 0,
                                    "opacity": 1,
                                  }
                                }
                                title="Move header right"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="chevron-left"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                  "right": 0,
                                }
                              }
                              tooltip="Move entire subtree left"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-chevron-left"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                    "right": 0,
                                  }
                                }
                                title="Move entire subtree left"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="chevron-right"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "left": 0,
                                  "opacity": 1,
                                }
                              }
                              tooltip="Move entire subtree right"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-chevron-right"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "left": 0,
                                    "opacity": 1,
                                  }
                                }
                                title="Move entire subtree right"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__main-arrow-button"
                              iconName="arrows-alt"
                              isDisabled={false}
                              onClick={[Function]}
                              onRef={
                                Object {
                                  "current": <button
                                    class="btn btn--circle action-drawer__btn action-drawer__main-arrow-button fas fa-lg fa-arrows-alt"
                                    style="opacity: 1;"
                                    title="Show movement buttons"
                                  />,
                                }
                              }
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Show movement buttons"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__main-arrow-button fas fa-lg fa-arrows-alt"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "opacity": 1,
                                  }
                                }
                                title="Show movement buttons"
                              />
                            </ActionButton>
                          </div>
                        </Motion>
                        <ActionButton
                          iconName="calendar-alt"
                          isDisabled={false}
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          tooltip="Show agenda"
                        >
                          <button
                            className="btn btn--circle action-drawer__btn fas fa-lg fa-calendar-alt"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                            title="Show agenda"
                          />
                        </ActionButton>
                        <Motion
                          style={
                            Object {
                              "bottom": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                            }
                          }
                        >
                          <div
                            className="action-drawer__capture-buttons-container"
                          >
                            <ActionButton
                              iconName="list-ul"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "opacity": 1,
                                  "position": "relative",
                                  "zIndex": 1,
                                }
                              }
                              tooltip="Show capture templates"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn fas fa-lg fa-list-ul"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "opacity": 1,
                                    "position": "relative",
                                    "zIndex": 1,
                                  }
                                }
                                title="Show capture templates"
                              />
                            </ActionButton>
                          </div>
                        </Motion>
                      </div>
                    </ActionDrawer>
                  </Connect(ActionDrawer)>
                </div>
              </div>
            </FocusTrap>
          </HotKeys>
        </OrgFile>
      </Connect(OrgFile)>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`Rendering an org file Can advance todo state for selected header in an org file 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(OrgFile)
        path="/some/test/file"
      >
        <OrgFile
          activePopupData={null}
          activePopupType={null}
          base={
            Object {
              "activatePopup": [Function],
              "clearModalStack": [Function],
              "closePopup": [Function],
              "hideLoadingMessage": [Function],
              "loadStaticFile": [Function],
              "popModalPage": [Function],
              "pushModalPage": [Function],
              "restoreBaseSettings": [Function],
              "setAgendaDefaultDeadlineDelayUnit": [Function],
              "setAgendaDefaultDeadlineDelayValue": [Function],
              "setBulletStyle": [Function],
              "setCustomKeybinding": [Function],
              "setDisappearingLoadingMessage": [Function],
              "setFontSize": [Function],
              "setHasUnseenChangelog": [Function],
              "setIsLoading": [Function],
              "setLastSeenChangelogHeader": [Function],
              "setLastViewedFile": [Function],
              "setLoadingMessage": [Function],
              "setShouldLiveSync": [Function],
              "setShouldStoreSettingsInSyncBackend": [Function],
              "setShouldTapTodoToAdvance": [Function],
              "unloadStaticFile": [Function],
            }
          }
          capture={
            Object {
              "addNewEmptyCaptureTemplate": [Function],
              "addNewTemplateHeaderPath": [Function],
              "addNewTemplateOrgFileAvailability": [Function],
              "deleteTemplate": [Function],
              "removeTemplateHeaderPath": [Function],
              "removeTemplateOrgFileAvailability": [Function],
              "reorderCaptureTemplate": [Function],
              "restoreCaptureSettings": [Function],
              "updateTemplateFieldPathValue": [Function],
            }
          }
          captureTemplates={
            Array [
              Immutable.List [
                Immutable.Map {
                  "headerPaths": Immutable.List [
                    "Capture",
                    "Groceries",
                  ],
                  "iconName": "lemon",
                  "letter": "",
                  "isAvailableInAllOrgFiles": false,
                  "isSample": true,
                  "orgFilesWhereAvailable": Immutable.List [],
                  "template": "* TODO %?",
                  "id": 1,
                  "shouldPrepend": false,
                  "description": "Groceries",
                },
                Immutable.Map {
                  "headerPaths": Immutable.List [
                    "Capture",
                    "Deeply",
                    "Nested",
                    "Headers",
                    "Work",
                    "Too!",
                  ],
                  "iconName": "fighter-jet",
                  "letter": "",
                  "isAvailableInAllOrgFiles": false,
                  "isSample": true,
                  "orgFilesWhereAvailable": Immutable.List [],
                  "template": "* You can insert timestamps too! %T %?",
                  "id": 2,
                  "shouldPrepend": true,
                  "description": "Deeply nested header",
                },
              ],
            ]
          }
          customKeybindings={Immutable.Map {}}
          headers={
            Immutable.List [
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "Top level header",
                    },
                  ],
                  "rawTitle": "Top level header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": true,
                "id": 35,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A nested header",
                    },
                  ],
                  "rawTitle": "A nested header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 36,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A todo item",
                    },
                  ],
                  "rawTitle": "A todo item",
                  "todoKeyword": "TODO",
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 37,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A finished todo item",
                    },
                  ],
                  "rawTitle": "A finished todo item",
                  "todoKeyword": "DONE",
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 38,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "Another top level header",
                    },
                  ],
                  "rawTitle": "Another top level header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "Some description content",
                "description": Immutable.List [
                  Immutable.Map {
                    "type": "text",
                    "contents": "Some description content",
                  },
                ],
                "opened": false,
                "id": 39,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A header with tags                                              ",
                    },
                  ],
                  "rawTitle": "A header with tags                                              ",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [
                    "tag1",
                    "tag2",
                  ],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 40,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A header with ",
                    },
                    Immutable.Map {
                      "id": 41,
                      "type": "link",
                      "contents": Immutable.Map {
                        "uri": "https://google.com",
                        "title": "a link",
                      },
                    },
                  ],
                  "rawTitle": "A header with [[https://google.com][a link]]",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 42,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
            ]
          }
          inEditMode={false}
          loadedPath="/some/test/file"
          org={
            Object {
              "addHeader": [Function],
              "addHeaderAndEdit": [Function],
              "addNewPlanningItem": [Function],
              "addNewTableColumn": [Function],
              "addNewTableRow": [Function],
              "advanceCheckboxState": [Function],
              "advanceTodoState": [Function],
              "applyOpennessState": [Function],
              "clearPendingCapture": [Function],
              "displayFile": [Function],
              "enterEditMode": [Function],
              "exitEditMode": [Function],
              "focusHeader": [Function],
              "insertCapture": [Function],
              "insertPendingCapture": [Function],
              "moveHeaderDown": [Function],
              "moveHeaderLeft": [Function],
              "moveHeaderRight": [Function],
              "moveHeaderUp": [Function],
              "moveSubtreeLeft": [Function],
              "moveSubtreeRight": [Function],
              "moveTableColumnLeft": [Function],
              "moveTableColumnRight": [Function],
              "moveTableRowDown": [Function],
              "moveTableRowUp": [Function],
              "noOp": [Function],
              "openHeader": [Function],
              "removeHeader": [Function],
              "removeTableColumn": [Function],
              "removeTableRow": [Function],
              "reorderPropertyList": [Function],
              "reorderTags": [Function],
              "selectHeader": [Function],
              "selectHeaderAndOpenParents": [Function],
              "selectNextSiblingHeader": [Function],
              "selectNextVisibleHeader": [Function],
              "selectPreviousVisibleHeader": [Function],
              "setDirty": [Function],
              "setHeaderTags": [Function],
              "setLastSyncAt": [Function],
              "setOrgFileErrorMessage": [Function],
              "setSelectedTableCellId": [Function],
              "stopDisplayingFile": [Function],
              "sync": [Function],
              "toggleHeaderOpened": [Function],
              "unfocusHeader": [Function],
              "updateHeaderDescription": [Function],
              "updateHeaderTitle": [Function],
              "updatePlanningItemTimestamp": [Function],
              "updatePropertyListItems": [Function],
              "updateTableCellValue": [Function],
              "updateTimestampWithId": [Function],
            }
          }
          path="/some/test/file"
          selectedHeader={
            Immutable.Map {
              "titleLine": Immutable.Map {
                "title": Immutable.List [
                  Immutable.Map {
                    "type": "text",
                    "contents": "Top level header",
                  },
                ],
                "rawTitle": "Top level header",
                "todoKeyword": undefined,
                "tags": Immutable.List [],
              },
              "rawDescription": "",
              "description": Immutable.List [],
              "opened": true,
              "id": 35,
              "nestingLevel": 1,
              "planningItems": Immutable.List [],
              "propertyListItems": Immutable.List [],
            }
          }
          selectedHeaderId={35}
          syncBackend={
            Object {
              "downloadFile": [Function],
              "getDirectoryListing": [Function],
              "loadMoreDirectoryListing": [Function],
              "pushBackup": [Function],
              "setCurrentFileBrowserDirectoryListing": [Function],
              "setIsLoadingMoreDirectoryListing": [Function],
              "signOut": [Function],
            }
          }
          undo={
            Object {
              "clearHistory": [Function],
              "jump": [Function],
              "jumpToFuture": [Function],
              "jumpToPast": [Function],
              "redo": [Function],
              "undo": [Function],
            }
          }
        >
          <HotKeys
            handlers={
              Object {
                "addHeader": [Function],
                "advanceTodo": [Function],
                "editDescription": [Function],
                "editTitle": [Function],
                "exitEditMode": [Function],
                "moveHeaderDown": [Function],
                "moveHeaderLeft": [Function],
                "moveHeaderRight": [Function],
                "moveHeaderUp": [Function],
                "removeHeader": [Function],
                "selectNextVisibleHeader": [Function],
                "selectPreviousVisibleHeader": [Function],
                "toggleHeaderOpened": [Function],
                "undo": [Function],
              }
            }
            keyMap={
              Object {
                "addHeader": "ctrl+enter",
                "advanceTodo": "ctrl+t",
                "editDescription": "ctrl+d",
                "editTitle": "ctrl+h",
                "exitEditMode": "command+enter",
                "moveHeaderDown": "ctrl+command+n",
                "moveHeaderLeft": "ctrl+command+b",
                "moveHeaderRight": "ctrl+command+f",
                "moveHeaderUp": "ctrl+command+p",
                "removeHeader": "backspace",
                "selectNextVisibleHeader": "ctrl+n",
                "selectPreviousVisibleHeader": "ctrl+p",
                "toggleHeaderOpened": "tab",
                "undo": "ctrl+shift+-",
              }
            }
          >
            <FocusTrap
              component="div"
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <div
                onBlur={[Function]}
                onFocus={[Function]}
                tabIndex="-1"
              >
                <div
                  className="org-file-container"
                  tabIndex="-1"
                >
                  <Connect(HeaderList)>
                    <HeaderList
                      headers={
                        Immutable.List [
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Top level header",
                                },
                              ],
                              "rawTitle": "Top level header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": true,
                            "id": 35,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A nested header",
                                },
                              ],
                              "rawTitle": "A nested header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 36,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A todo item",
                                },
                              ],
                              "rawTitle": "A todo item",
                              "todoKeyword": "TODO",
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 37,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A finished todo item",
                                },
                              ],
                              "rawTitle": "A finished todo item",
                              "todoKeyword": "DONE",
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 38,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Another top level header",
                                },
                              ],
                              "rawTitle": "Another top level header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "Some description content",
                            "description": Immutable.List [
                              Immutable.Map {
                                "type": "text",
                                "contents": "Some description content",
                              },
                            ],
                            "opened": false,
                            "id": 39,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A header with tags                                              ",
                                },
                              ],
                              "rawTitle": "A header with tags                                              ",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [
                                "tag1",
                                "tag2",
                              ],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 40,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A header with ",
                                },
                                Immutable.Map {
                                  "id": 41,
                                  "type": "link",
                                  "contents": Immutable.Map {
                                    "uri": "https://google.com",
                                    "title": "a link",
                                  },
                                },
                              ],
                              "rawTitle": "A header with [[https://google.com][a link]]",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 42,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                        ]
                      }
                      selectedHeaderId={35}
                    >
                      <div
                        className="header-list-container"
                      >
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={true}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Top level header",
                                  },
                                ],
                                "rawTitle": "Top level header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": true,
                              "id": 35,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={true}
                          key="35"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={true}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "Top level header",
                                    },
                                  ],
                                  "rawTitle": "Top level header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": true,
                                "id": 35,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={true}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header header--selected"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={true}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Top level header",
                                          },
                                        ],
                                        "rawTitle": "Top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": true,
                                      "id": 35,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={true}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={true}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Top level header",
                                            },
                                          ],
                                          "rawTitle": "Top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": true,
                                        "id": 35,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={true}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "Top level header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              Top level header
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={true}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                >
                                  <Collapse
                                    fixedHeight={-1}
                                    forceInitialAnimation={true}
                                    hasNestedCollapse={false}
                                    isOpened={true}
                                    onMeasure={[Function]}
                                    onRender={[Function]}
                                    onRest={[Function]}
                                    springConfig={
                                      Object {
                                        "stiffness": 300,
                                      }
                                    }
                                    style={
                                      Object {
                                        "marginRight": -0,
                                      }
                                    }
                                    theme={
                                      Object {
                                        "collapse": "ReactCollapse--collapse",
                                        "content": "ReactCollapse--content",
                                      }
                                    }
                                  >
                                    <Motion
                                      defaultStyle={
                                        Object {
                                          "height": 0,
                                        }
                                      }
                                      onRest={[Function]}
                                      style={
                                        Object {
                                          "height": Object {
                                            "damping": 26,
                                            "precision": 1,
                                            "stiffness": 300,
                                            "val": 0,
                                          },
                                        }
                                      }
                                    >
                                      <div
                                        className="ReactCollapse--collapse"
                                        style={
                                          Object {
                                            "height": 0,
                                            "marginRight": -0,
                                            "overflow": "hidden",
                                          }
                                        }
                                      >
                                        <div
                                          className="ReactCollapse--content"
                                        >
                                          <HeaderActionDrawer
                                            isFocused={false}
                                            onAddNewHeader={[Function]}
                                            onDeadlineClick={[Function]}
                                            onEnterDescriptionEditMode={[Function]}
                                            onEnterTitleEditMode={[Function]}
                                            onFocus={[Function]}
                                            onScheduledClick={[Function]}
                                            onTagsClick={[Function]}
                                            onUnfocus={[Function]}
                                          >
                                            <div
                                              className="header-action-drawer-container"
                                            >
                                              <div
                                                className="header-action-drawer__row"
                                              >
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-pencil-alt fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-edit fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-tags fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-compress fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-plus fa-lg"
                                                  />
                                                </div>
                                              </div>
                                              <div
                                                className="header-action-drawer__row"
                                              >
                                                <div
                                                  className="header-action-drawer__deadline-scheduled-button"
                                                  onClick={[Function]}
                                                >
                                                  Deadline
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__deadline-scheduled-button"
                                                  onClick={[Function]}
                                                >
                                                  Scheduled
                                                </div>
                                              </div>
                                            </div>
                                          </HeaderActionDrawer>
                                        </div>
                                      </div>
                                    </Motion>
                                  </Collapse>
                                </UnmountClosed>
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Top level header",
                                          },
                                        ],
                                        "rawTitle": "Top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": true,
                                      "id": 35,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Top level header",
                                            },
                                          ],
                                          "rawTitle": "Top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": true,
                                        "id": 35,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={true}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div
                                      className="header-content-container nice-scroll"
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <PlanningItems
                                        onClick={[Function]}
                                        planningItems={Immutable.List []}
                                      />
                                      <_default
                                        onEdit={[Function]}
                                        onTimestampClick={[Function]}
                                        propertyListItems={Immutable.List []}
                                      />
                                      <_default
                                        parts={Immutable.List []}
                                        subPartDataAndHandlers={
                                          Object {
                                            "inTableEditMode": false,
                                            "onAddNewTableColumn": [Function],
                                            "onAddNewTableRow": [Function],
                                            "onCheckboxClick": [Function],
                                            "onEnterTableEditMode": [Function],
                                            "onExitTableEditMode": [Function],
                                            "onRemoveTableColumn": [Function],
                                            "onRemoveTableRow": [Function],
                                            "onTableCellSelect": [Function],
                                            "onTableCellValueUpdate": [Function],
                                            "onTimestampClick": [Function],
                                            "selectedTableCellId": null,
                                            "shouldDisableActions": undefined,
                                          }
                                        }
                                      >
                                        <span>
                                          <Component />
                                        </span>
                                      </_default>
                                    </div>
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(42, 164, 168, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A nested header",
                                  },
                                ],
                                "rawTitle": "A nested header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 36,
                              "nestingLevel": 2,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="36"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(42, 164, 168, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A nested header",
                                    },
                                  ],
                                  "rawTitle": "A nested header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 36,
                                "nestingLevel": 2,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 40,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 40,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(42, 164, 168, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(42, 164, 168, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A nested header",
                                          },
                                        ],
                                        "rawTitle": "A nested header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 36,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(42, 164, 168, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A nested header",
                                            },
                                          ],
                                          "rawTitle": "A nested header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 36,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(42, 164, 168, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A nested header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A nested header
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A nested header",
                                          },
                                        ],
                                        "rawTitle": "A nested header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 36,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A nested header",
                                            },
                                          ],
                                          "rawTitle": "A nested header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 36,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(42, 164, 168, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A todo item",
                                  },
                                ],
                                "rawTitle": "A todo item",
                                "todoKeyword": "TODO",
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 37,
                              "nestingLevel": 2,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="37"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(42, 164, 168, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A todo item",
                                    },
                                  ],
                                  "rawTitle": "A todo item",
                                  "todoKeyword": "TODO",
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 37,
                                "nestingLevel": 2,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 40,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 40,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(42, 164, 168, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(42, 164, 168, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A todo item",
                                          },
                                        ],
                                        "rawTitle": "A todo item",
                                        "todoKeyword": "TODO",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 37,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(42, 164, 168, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A todo item",
                                            },
                                          ],
                                          "rawTitle": "A todo item",
                                          "todoKeyword": "TODO",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 37,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <span
                                        className="todo-keyword todo-keyword--todo"
                                        onClick={[Function]}
                                      >
                                        TODO
                                      </span>
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(42, 164, 168, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A todo item",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A todo item
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A todo item",
                                          },
                                        ],
                                        "rawTitle": "A todo item",
                                        "todoKeyword": "TODO",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 37,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A todo item",
                                            },
                                          ],
                                          "rawTitle": "A todo item",
                                          "todoKeyword": "TODO",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 37,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(42, 164, 168, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A finished todo item",
                                  },
                                ],
                                "rawTitle": "A finished todo item",
                                "todoKeyword": "DONE",
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 38,
                              "nestingLevel": 2,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="38"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(42, 164, 168, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A finished todo item",
                                    },
                                  ],
                                  "rawTitle": "A finished todo item",
                                  "todoKeyword": "DONE",
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 38,
                                "nestingLevel": 2,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 40,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 40,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(42, 164, 168, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(42, 164, 168, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A finished todo item",
                                          },
                                        ],
                                        "rawTitle": "A finished todo item",
                                        "todoKeyword": "DONE",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 38,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(42, 164, 168, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A finished todo item",
                                            },
                                          ],
                                          "rawTitle": "A finished todo item",
                                          "todoKeyword": "DONE",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 38,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <span
                                        className="todo-keyword todo-keyword--done"
                                        onClick={[Function]}
                                      >
                                        DONE
                                      </span>
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(42, 164, 168, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A finished todo item",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A finished todo item
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A finished todo item",
                                          },
                                        ],
                                        "rawTitle": "A finished todo item",
                                        "todoKeyword": "DONE",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 38,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A finished todo item",
                                            },
                                          ],
                                          "rawTitle": "A finished todo item",
                                          "todoKeyword": "DONE",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 38,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={true}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Another top level header",
                                  },
                                ],
                                "rawTitle": "Another top level header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "Some description content",
                              "description": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Some description content",
                                },
                              ],
                              "opened": false,
                              "id": 39,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="39"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={true}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "Another top level header",
                                    },
                                  ],
                                  "rawTitle": "Another top level header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "Some description content",
                                "description": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Some description content",
                                  },
                                ],
                                "opened": false,
                                "id": 39,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={true}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Another top level header",
                                          },
                                        ],
                                        "rawTitle": "Another top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "Some description content",
                                      "description": Immutable.List [
                                        Immutable.Map {
                                          "type": "text",
                                          "contents": "Some description content",
                                        },
                                      ],
                                      "opened": false,
                                      "id": 39,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={true}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Another top level header",
                                            },
                                          ],
                                          "rawTitle": "Another top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "Some description content",
                                        "description": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Some description content",
                                          },
                                        ],
                                        "opened": false,
                                        "id": 39,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "Another top level header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              Another top level header
                                            </span>
                                          </_default>
                                          ...
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Another top level header",
                                          },
                                        ],
                                        "rawTitle": "Another top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "Some description content",
                                      "description": Immutable.List [
                                        Immutable.Map {
                                          "type": "text",
                                          "contents": "Some description content",
                                        },
                                      ],
                                      "opened": false,
                                      "id": 39,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Another top level header",
                                            },
                                          ],
                                          "rawTitle": "Another top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "Some description content",
                                        "description": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Some description content",
                                          },
                                        ],
                                        "opened": false,
                                        "id": 39,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A header with tags                                              ",
                                  },
                                ],
                                "rawTitle": "A header with tags                                              ",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [
                                  "tag1",
                                  "tag2",
                                ],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 40,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="40"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A header with tags                                              ",
                                    },
                                  ],
                                  "rawTitle": "A header with tags                                              ",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 40,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with tags                                              ",
                                          },
                                        ],
                                        "rawTitle": "A header with tags                                              ",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [
                                          "tag1",
                                          "tag2",
                                        ],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 40,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with tags                                              ",
                                            },
                                          ],
                                          "rawTitle": "A header with tags                                              ",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [
                                            "tag1",
                                            "tag2",
                                          ],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 40,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A header with tags                                              ",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A header with tags                                              
                                            </span>
                                          </_default>
                                        </span>
                                        <div>
                                          <div
                                            className="header-tag"
                                            key="tag1"
                                          >
                                            tag1
                                          </div>
                                          <div
                                            className="header-tag"
                                            key="tag2"
                                          >
                                            tag2
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with tags                                              ",
                                          },
                                        ],
                                        "rawTitle": "A header with tags                                              ",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [
                                          "tag1",
                                          "tag2",
                                        ],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 40,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with tags                                              ",
                                            },
                                          ],
                                          "rawTitle": "A header with tags                                              ",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [
                                            "tag1",
                                            "tag2",
                                          ],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 40,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A header with ",
                                  },
                                  Immutable.Map {
                                    "id": 41,
                                    "type": "link",
                                    "contents": Immutable.Map {
                                      "uri": "https://google.com",
                                      "title": "a link",
                                    },
                                  },
                                ],
                                "rawTitle": "A header with [[https://google.com][a link]]",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 42,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="42"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A header with ",
                                    },
                                    Immutable.Map {
                                      "id": 41,
                                      "type": "link",
                                      "contents": Immutable.Map {
                                        "uri": "https://google.com",
                                        "title": "a link",
                                      },
                                    },
                                  ],
                                  "rawTitle": "A header with [[https://google.com][a link]]",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 42,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with ",
                                          },
                                          Immutable.Map {
                                            "id": 41,
                                            "type": "link",
                                            "contents": Immutable.Map {
                                              "uri": "https://google.com",
                                              "title": "a link",
                                            },
                                          },
                                        ],
                                        "rawTitle": "A header with [[https://google.com][a link]]",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 42,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with ",
                                            },
                                            Immutable.Map {
                                              "id": 41,
                                              "type": "link",
                                              "contents": Immutable.Map {
                                                "uri": "https://google.com",
                                                "title": "a link",
                                              },
                                            },
                                          ],
                                          "rawTitle": "A header with [[https://google.com][a link]]",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 42,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A header with ",
                                                },
                                                Immutable.Map {
                                                  "id": 41,
                                                  "type": "link",
                                                  "contents": Immutable.Map {
                                                    "uri": "https://google.com",
                                                    "title": "a link",
                                                  },
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A header with 
                                              <a
                                                href="https://google.com"
                                                key="41"
                                                rel="noopener noreferrer"
                                                target="_blank"
                                              >
                                                a link
                                              </a>
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with ",
                                          },
                                          Immutable.Map {
                                            "id": 41,
                                            "type": "link",
                                            "contents": Immutable.Map {
                                              "uri": "https://google.com",
                                              "title": "a link",
                                            },
                                          },
                                        ],
                                        "rawTitle": "A header with [[https://google.com][a link]]",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 42,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with ",
                                            },
                                            Immutable.Map {
                                              "id": 41,
                                              "type": "link",
                                              "contents": Immutable.Map {
                                                "uri": "https://google.com",
                                                "title": "a link",
                                              },
                                            },
                                          ],
                                          "rawTitle": "A header with [[https://google.com][a link]]",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 42,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                      </div>
                    </HeaderList>
                  </Connect(HeaderList)>
                  <Connect(ActionDrawer)>
                    <ActionDrawer
                      base={
                        Object {
                          "activatePopup": [Function],
                          "clearModalStack": [Function],
                          "closePopup": [Function],
                          "hideLoadingMessage": [Function],
                          "loadStaticFile": [Function],
                          "popModalPage": [Function],
                          "pushModalPage": [Function],
                          "restoreBaseSettings": [Function],
                          "setAgendaDefaultDeadlineDelayUnit": [Function],
                          "setAgendaDefaultDeadlineDelayValue": [Function],
                          "setBulletStyle": [Function],
                          "setCustomKeybinding": [Function],
                          "setDisappearingLoadingMessage": [Function],
                          "setFontSize": [Function],
                          "setHasUnseenChangelog": [Function],
                          "setIsLoading": [Function],
                          "setLastSeenChangelogHeader": [Function],
                          "setLastViewedFile": [Function],
                          "setLoadingMessage": [Function],
                          "setShouldLiveSync": [Function],
                          "setShouldStoreSettingsInSyncBackend": [Function],
                          "setShouldTapTodoToAdvance": [Function],
                          "unloadStaticFile": [Function],
                        }
                      }
                      capture={
                        Object {
                          "addNewEmptyCaptureTemplate": [Function],
                          "addNewTemplateHeaderPath": [Function],
                          "addNewTemplateOrgFileAvailability": [Function],
                          "deleteTemplate": [Function],
                          "removeTemplateHeaderPath": [Function],
                          "removeTemplateOrgFileAvailability": [Function],
                          "reorderCaptureTemplate": [Function],
                          "restoreCaptureSettings": [Function],
                          "updateTemplateFieldPathValue": [Function],
                        }
                      }
                      captureTemplates={Array []}
                      inEditMode={false}
                      isFocusedHeaderActive={false}
                      org={
                        Object {
                          "addHeader": [Function],
                          "addHeaderAndEdit": [Function],
                          "addNewPlanningItem": [Function],
                          "addNewTableColumn": [Function],
                          "addNewTableRow": [Function],
                          "advanceCheckboxState": [Function],
                          "advanceTodoState": [Function],
                          "applyOpennessState": [Function],
                          "clearPendingCapture": [Function],
                          "displayFile": [Function],
                          "enterEditMode": [Function],
                          "exitEditMode": [Function],
                          "focusHeader": [Function],
                          "insertCapture": [Function],
                          "insertPendingCapture": [Function],
                          "moveHeaderDown": [Function],
                          "moveHeaderLeft": [Function],
                          "moveHeaderRight": [Function],
                          "moveHeaderUp": [Function],
                          "moveSubtreeLeft": [Function],
                          "moveSubtreeRight": [Function],
                          "moveTableColumnLeft": [Function],
                          "moveTableColumnRight": [Function],
                          "moveTableRowDown": [Function],
                          "moveTableRowUp": [Function],
                          "noOp": [Function],
                          "openHeader": [Function],
                          "removeHeader": [Function],
                          "removeTableColumn": [Function],
                          "removeTableRow": [Function],
                          "reorderPropertyList": [Function],
                          "reorderTags": [Function],
                          "selectHeader": [Function],
                          "selectHeaderAndOpenParents": [Function],
                          "selectNextSiblingHeader": [Function],
                          "selectNextVisibleHeader": [Function],
                          "selectPreviousVisibleHeader": [Function],
                          "setDirty": [Function],
                          "setHeaderTags": [Function],
                          "setLastSyncAt": [Function],
                          "setOrgFileErrorMessage": [Function],
                          "setSelectedTableCellId": [Function],
                          "stopDisplayingFile": [Function],
                          "sync": [Function],
                          "toggleHeaderOpened": [Function],
                          "unfocusHeader": [Function],
                          "updateHeaderDescription": [Function],
                          "updateHeaderTitle": [Function],
                          "updatePlanningItemTimestamp": [Function],
                          "updatePropertyListItems": [Function],
                          "updateTableCellValue": [Function],
                          "updateTimestampWithId": [Function],
                        }
                      }
                      path="/some/test/file"
                      selectedHeaderId={35}
                      selectedTableCellId={null}
                    >
                      <div
                        className="action-drawer-container nice-scroll"
                      >
                        <ActionButton
                          iconName="cloud"
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          subIconName="sync-alt"
                          tooltip="Sync changes"
                        >
                          <button
                            className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud action-drawer__btn--with-sub-icon"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                            title="Sync changes"
                          >
                            <i
                              className="fas fa-xs fa-sync-alt action-drawer__btn__sub-icon"
                            />
                          </button>
                        </ActionButton>
                        <Motion
                          style={
                            Object {
                              "bottomRowYOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "centerXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "firstColumnXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "secondColumnXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "topRowYOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                            }
                          }
                        >
                          <div
                            className="action-drawer__arrow-buttons-container"
                            style={
                              Object {
                                "left": 0,
                              }
                            }
                          >
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-up"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header up"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-up"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                  }
                                }
                                title="Move header up"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-down"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header down"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-down"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                  }
                                }
                                title="Move header down"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-left"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                  "right": 0,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header left"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-left"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                    "right": 0,
                                  }
                                }
                                title="Move header left"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-right"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "left": 0,
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header right"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-right"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "left": 0,
                                    "opacity": 1,
                                  }
                                }
                                title="Move header right"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="chevron-left"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                  "right": 0,
                                }
                              }
                              tooltip="Move entire subtree left"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-chevron-left"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                    "right": 0,
                                  }
                                }
                                title="Move entire subtree left"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="chevron-right"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "left": 0,
                                  "opacity": 1,
                                }
                              }
                              tooltip="Move entire subtree right"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-chevron-right"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "left": 0,
                                    "opacity": 1,
                                  }
                                }
                                title="Move entire subtree right"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__main-arrow-button"
                              iconName="arrows-alt"
                              isDisabled={false}
                              onClick={[Function]}
                              onRef={
                                Object {
                                  "current": <button
                                    class="btn btn--circle action-drawer__btn action-drawer__main-arrow-button fas fa-lg fa-arrows-alt"
                                    style="opacity: 1;"
                                    title="Show movement buttons"
                                  />,
                                }
                              }
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Show movement buttons"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__main-arrow-button fas fa-lg fa-arrows-alt"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "opacity": 1,
                                  }
                                }
                                title="Show movement buttons"
                              />
                            </ActionButton>
                          </div>
                        </Motion>
                        <ActionButton
                          iconName="calendar-alt"
                          isDisabled={false}
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          tooltip="Show agenda"
                        >
                          <button
                            className="btn btn--circle action-drawer__btn fas fa-lg fa-calendar-alt"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                            title="Show agenda"
                          />
                        </ActionButton>
                        <Motion
                          style={
                            Object {
                              "bottom": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                            }
                          }
                        >
                          <div
                            className="action-drawer__capture-buttons-container"
                          >
                            <ActionButton
                              iconName="list-ul"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "opacity": 1,
                                  "position": "relative",
                                  "zIndex": 1,
                                }
                              }
                              tooltip="Show capture templates"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn fas fa-lg fa-list-ul"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "opacity": 1,
                                    "position": "relative",
                                    "zIndex": 1,
                                  }
                                }
                                title="Show capture templates"
                              />
                            </ActionButton>
                          </div>
                        </Motion>
                      </div>
                    </ActionDrawer>
                  </Connect(ActionDrawer)>
                </div>
              </div>
            </FocusTrap>
          </HotKeys>
        </OrgFile>
      </Connect(OrgFile)>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`Rendering an org file Can select a header in an org file 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(OrgFile)
        path="/some/test/file"
      >
        <OrgFile
          activePopupData={null}
          activePopupType={null}
          base={
            Object {
              "activatePopup": [Function],
              "clearModalStack": [Function],
              "closePopup": [Function],
              "hideLoadingMessage": [Function],
              "loadStaticFile": [Function],
              "popModalPage": [Function],
              "pushModalPage": [Function],
              "restoreBaseSettings": [Function],
              "setAgendaDefaultDeadlineDelayUnit": [Function],
              "setAgendaDefaultDeadlineDelayValue": [Function],
              "setBulletStyle": [Function],
              "setCustomKeybinding": [Function],
              "setDisappearingLoadingMessage": [Function],
              "setFontSize": [Function],
              "setHasUnseenChangelog": [Function],
              "setIsLoading": [Function],
              "setLastSeenChangelogHeader": [Function],
              "setLastViewedFile": [Function],
              "setLoadingMessage": [Function],
              "setShouldLiveSync": [Function],
              "setShouldStoreSettingsInSyncBackend": [Function],
              "setShouldTapTodoToAdvance": [Function],
              "unloadStaticFile": [Function],
            }
          }
          capture={
            Object {
              "addNewEmptyCaptureTemplate": [Function],
              "addNewTemplateHeaderPath": [Function],
              "addNewTemplateOrgFileAvailability": [Function],
              "deleteTemplate": [Function],
              "removeTemplateHeaderPath": [Function],
              "removeTemplateOrgFileAvailability": [Function],
              "reorderCaptureTemplate": [Function],
              "restoreCaptureSettings": [Function],
              "updateTemplateFieldPathValue": [Function],
            }
          }
          captureTemplates={
            Array [
              Immutable.List [
                Immutable.Map {
                  "headerPaths": Immutable.List [
                    "Capture",
                    "Groceries",
                  ],
                  "iconName": "lemon",
                  "letter": "",
                  "isAvailableInAllOrgFiles": false,
                  "isSample": true,
                  "orgFilesWhereAvailable": Immutable.List [],
                  "template": "* TODO %?",
                  "id": 1,
                  "shouldPrepend": false,
                  "description": "Groceries",
                },
                Immutable.Map {
                  "headerPaths": Immutable.List [
                    "Capture",
                    "Deeply",
                    "Nested",
                    "Headers",
                    "Work",
                    "Too!",
                  ],
                  "iconName": "fighter-jet",
                  "letter": "",
                  "isAvailableInAllOrgFiles": false,
                  "isSample": true,
                  "orgFilesWhereAvailable": Immutable.List [],
                  "template": "* You can insert timestamps too! %T %?",
                  "id": 2,
                  "shouldPrepend": true,
                  "description": "Deeply nested header",
                },
              ],
            ]
          }
          customKeybindings={Immutable.Map {}}
          headers={
            Immutable.List [
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "Top level header",
                    },
                  ],
                  "rawTitle": "Top level header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": true,
                "id": 27,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A nested header",
                    },
                  ],
                  "rawTitle": "A nested header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 28,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A todo item",
                    },
                  ],
                  "rawTitle": "A todo item",
                  "todoKeyword": "TODO",
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 29,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A finished todo item",
                    },
                  ],
                  "rawTitle": "A finished todo item",
                  "todoKeyword": "DONE",
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 30,
                "nestingLevel": 2,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "Another top level header",
                    },
                  ],
                  "rawTitle": "Another top level header",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "Some description content",
                "description": Immutable.List [
                  Immutable.Map {
                    "type": "text",
                    "contents": "Some description content",
                  },
                ],
                "opened": false,
                "id": 31,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A header with tags                                              ",
                    },
                  ],
                  "rawTitle": "A header with tags                                              ",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [
                    "tag1",
                    "tag2",
                  ],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 32,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
              Immutable.Map {
                "titleLine": Immutable.Map {
                  "title": Immutable.List [
                    Immutable.Map {
                      "type": "text",
                      "contents": "A header with ",
                    },
                    Immutable.Map {
                      "id": 33,
                      "type": "link",
                      "contents": Immutable.Map {
                        "uri": "https://google.com",
                        "title": "a link",
                      },
                    },
                  ],
                  "rawTitle": "A header with [[https://google.com][a link]]",
                  "todoKeyword": undefined,
                  "tags": Immutable.List [],
                },
                "rawDescription": "",
                "description": Immutable.List [],
                "opened": false,
                "id": 34,
                "nestingLevel": 1,
                "planningItems": Immutable.List [],
                "propertyListItems": Immutable.List [],
              },
            ]
          }
          inEditMode={false}
          loadedPath="/some/test/file"
          org={
            Object {
              "addHeader": [Function],
              "addHeaderAndEdit": [Function],
              "addNewPlanningItem": [Function],
              "addNewTableColumn": [Function],
              "addNewTableRow": [Function],
              "advanceCheckboxState": [Function],
              "advanceTodoState": [Function],
              "applyOpennessState": [Function],
              "clearPendingCapture": [Function],
              "displayFile": [Function],
              "enterEditMode": [Function],
              "exitEditMode": [Function],
              "focusHeader": [Function],
              "insertCapture": [Function],
              "insertPendingCapture": [Function],
              "moveHeaderDown": [Function],
              "moveHeaderLeft": [Function],
              "moveHeaderRight": [Function],
              "moveHeaderUp": [Function],
              "moveSubtreeLeft": [Function],
              "moveSubtreeRight": [Function],
              "moveTableColumnLeft": [Function],
              "moveTableColumnRight": [Function],
              "moveTableRowDown": [Function],
              "moveTableRowUp": [Function],
              "noOp": [Function],
              "openHeader": [Function],
              "removeHeader": [Function],
              "removeTableColumn": [Function],
              "removeTableRow": [Function],
              "reorderPropertyList": [Function],
              "reorderTags": [Function],
              "selectHeader": [Function],
              "selectHeaderAndOpenParents": [Function],
              "selectNextSiblingHeader": [Function],
              "selectNextVisibleHeader": [Function],
              "selectPreviousVisibleHeader": [Function],
              "setDirty": [Function],
              "setHeaderTags": [Function],
              "setLastSyncAt": [Function],
              "setOrgFileErrorMessage": [Function],
              "setSelectedTableCellId": [Function],
              "stopDisplayingFile": [Function],
              "sync": [Function],
              "toggleHeaderOpened": [Function],
              "unfocusHeader": [Function],
              "updateHeaderDescription": [Function],
              "updateHeaderTitle": [Function],
              "updatePlanningItemTimestamp": [Function],
              "updatePropertyListItems": [Function],
              "updateTableCellValue": [Function],
              "updateTimestampWithId": [Function],
            }
          }
          path="/some/test/file"
          selectedHeader={
            Immutable.Map {
              "titleLine": Immutable.Map {
                "title": Immutable.List [
                  Immutable.Map {
                    "type": "text",
                    "contents": "Top level header",
                  },
                ],
                "rawTitle": "Top level header",
                "todoKeyword": undefined,
                "tags": Immutable.List [],
              },
              "rawDescription": "",
              "description": Immutable.List [],
              "opened": true,
              "id": 27,
              "nestingLevel": 1,
              "planningItems": Immutable.List [],
              "propertyListItems": Immutable.List [],
            }
          }
          selectedHeaderId={27}
          syncBackend={
            Object {
              "downloadFile": [Function],
              "getDirectoryListing": [Function],
              "loadMoreDirectoryListing": [Function],
              "pushBackup": [Function],
              "setCurrentFileBrowserDirectoryListing": [Function],
              "setIsLoadingMoreDirectoryListing": [Function],
              "signOut": [Function],
            }
          }
          undo={
            Object {
              "clearHistory": [Function],
              "jump": [Function],
              "jumpToFuture": [Function],
              "jumpToPast": [Function],
              "redo": [Function],
              "undo": [Function],
            }
          }
        >
          <HotKeys
            handlers={
              Object {
                "addHeader": [Function],
                "advanceTodo": [Function],
                "editDescription": [Function],
                "editTitle": [Function],
                "exitEditMode": [Function],
                "moveHeaderDown": [Function],
                "moveHeaderLeft": [Function],
                "moveHeaderRight": [Function],
                "moveHeaderUp": [Function],
                "removeHeader": [Function],
                "selectNextVisibleHeader": [Function],
                "selectPreviousVisibleHeader": [Function],
                "toggleHeaderOpened": [Function],
                "undo": [Function],
              }
            }
            keyMap={
              Object {
                "addHeader": "ctrl+enter",
                "advanceTodo": "ctrl+t",
                "editDescription": "ctrl+d",
                "editTitle": "ctrl+h",
                "exitEditMode": "command+enter",
                "moveHeaderDown": "ctrl+command+n",
                "moveHeaderLeft": "ctrl+command+b",
                "moveHeaderRight": "ctrl+command+f",
                "moveHeaderUp": "ctrl+command+p",
                "removeHeader": "backspace",
                "selectNextVisibleHeader": "ctrl+n",
                "selectPreviousVisibleHeader": "ctrl+p",
                "toggleHeaderOpened": "tab",
                "undo": "ctrl+shift+-",
              }
            }
          >
            <FocusTrap
              component="div"
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <div
                onBlur={[Function]}
                onFocus={[Function]}
                tabIndex="-1"
              >
                <div
                  className="org-file-container"
                  tabIndex="-1"
                >
                  <Connect(HeaderList)>
                    <HeaderList
                      headers={
                        Immutable.List [
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Top level header",
                                },
                              ],
                              "rawTitle": "Top level header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": true,
                            "id": 27,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A nested header",
                                },
                              ],
                              "rawTitle": "A nested header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 28,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A todo item",
                                },
                              ],
                              "rawTitle": "A todo item",
                              "todoKeyword": "TODO",
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 29,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A finished todo item",
                                },
                              ],
                              "rawTitle": "A finished todo item",
                              "todoKeyword": "DONE",
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 30,
                            "nestingLevel": 2,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Another top level header",
                                },
                              ],
                              "rawTitle": "Another top level header",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "Some description content",
                            "description": Immutable.List [
                              Immutable.Map {
                                "type": "text",
                                "contents": "Some description content",
                              },
                            ],
                            "opened": false,
                            "id": 31,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A header with tags                                              ",
                                },
                              ],
                              "rawTitle": "A header with tags                                              ",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [
                                "tag1",
                                "tag2",
                              ],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 32,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                          Immutable.Map {
                            "titleLine": Immutable.Map {
                              "title": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "A header with ",
                                },
                                Immutable.Map {
                                  "id": 33,
                                  "type": "link",
                                  "contents": Immutable.Map {
                                    "uri": "https://google.com",
                                    "title": "a link",
                                  },
                                },
                              ],
                              "rawTitle": "A header with [[https://google.com][a link]]",
                              "todoKeyword": undefined,
                              "tags": Immutable.List [],
                            },
                            "rawDescription": "",
                            "description": Immutable.List [],
                            "opened": false,
                            "id": 34,
                            "nestingLevel": 1,
                            "planningItems": Immutable.List [],
                            "propertyListItems": Immutable.List [],
                          },
                        ]
                      }
                      selectedHeaderId={27}
                    >
                      <div
                        className="header-list-container"
                      >
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={true}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Top level header",
                                  },
                                ],
                                "rawTitle": "Top level header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": true,
                              "id": 27,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={true}
                          key="27"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={true}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "Top level header",
                                    },
                                  ],
                                  "rawTitle": "Top level header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": true,
                                "id": 27,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={true}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header header--selected"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={true}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Top level header",
                                          },
                                        ],
                                        "rawTitle": "Top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": true,
                                      "id": 27,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={true}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={true}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Top level header",
                                            },
                                          ],
                                          "rawTitle": "Top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": true,
                                        "id": 27,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={true}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "Top level header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              Top level header
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={true}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                >
                                  <Collapse
                                    fixedHeight={-1}
                                    forceInitialAnimation={true}
                                    hasNestedCollapse={false}
                                    isOpened={true}
                                    onMeasure={[Function]}
                                    onRender={[Function]}
                                    onRest={[Function]}
                                    springConfig={
                                      Object {
                                        "stiffness": 300,
                                      }
                                    }
                                    style={
                                      Object {
                                        "marginRight": -0,
                                      }
                                    }
                                    theme={
                                      Object {
                                        "collapse": "ReactCollapse--collapse",
                                        "content": "ReactCollapse--content",
                                      }
                                    }
                                  >
                                    <Motion
                                      defaultStyle={
                                        Object {
                                          "height": 0,
                                        }
                                      }
                                      onRest={[Function]}
                                      style={
                                        Object {
                                          "height": Object {
                                            "damping": 26,
                                            "precision": 1,
                                            "stiffness": 300,
                                            "val": 0,
                                          },
                                        }
                                      }
                                    >
                                      <div
                                        className="ReactCollapse--collapse"
                                        style={
                                          Object {
                                            "height": 0,
                                            "marginRight": -0,
                                            "overflow": "hidden",
                                          }
                                        }
                                      >
                                        <div
                                          className="ReactCollapse--content"
                                        >
                                          <HeaderActionDrawer
                                            isFocused={false}
                                            onAddNewHeader={[Function]}
                                            onDeadlineClick={[Function]}
                                            onEnterDescriptionEditMode={[Function]}
                                            onEnterTitleEditMode={[Function]}
                                            onFocus={[Function]}
                                            onScheduledClick={[Function]}
                                            onTagsClick={[Function]}
                                            onUnfocus={[Function]}
                                          >
                                            <div
                                              className="header-action-drawer-container"
                                            >
                                              <div
                                                className="header-action-drawer__row"
                                              >
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-pencil-alt fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-edit fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-tags fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-compress fa-lg"
                                                  />
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__ff-click-catcher-container"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    className="header-action-drawer__ff-click-catcher"
                                                  />
                                                  <i
                                                    className="fas fa-plus fa-lg"
                                                  />
                                                </div>
                                              </div>
                                              <div
                                                className="header-action-drawer__row"
                                              >
                                                <div
                                                  className="header-action-drawer__deadline-scheduled-button"
                                                  onClick={[Function]}
                                                >
                                                  Deadline
                                                </div>
                                                <span
                                                  className="header-action-drawer__separator"
                                                />
                                                <div
                                                  className="header-action-drawer__deadline-scheduled-button"
                                                  onClick={[Function]}
                                                >
                                                  Scheduled
                                                </div>
                                              </div>
                                            </div>
                                          </HeaderActionDrawer>
                                        </div>
                                      </div>
                                    </Motion>
                                  </Collapse>
                                </UnmountClosed>
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Top level header",
                                          },
                                        ],
                                        "rawTitle": "Top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": true,
                                      "id": 27,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Top level header",
                                            },
                                          ],
                                          "rawTitle": "Top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": true,
                                        "id": 27,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={true}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div
                                      className="header-content-container nice-scroll"
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <PlanningItems
                                        onClick={[Function]}
                                        planningItems={Immutable.List []}
                                      />
                                      <_default
                                        onEdit={[Function]}
                                        onTimestampClick={[Function]}
                                        propertyListItems={Immutable.List []}
                                      />
                                      <_default
                                        parts={Immutable.List []}
                                        subPartDataAndHandlers={
                                          Object {
                                            "inTableEditMode": false,
                                            "onAddNewTableColumn": [Function],
                                            "onAddNewTableRow": [Function],
                                            "onCheckboxClick": [Function],
                                            "onEnterTableEditMode": [Function],
                                            "onExitTableEditMode": [Function],
                                            "onRemoveTableColumn": [Function],
                                            "onRemoveTableRow": [Function],
                                            "onTableCellSelect": [Function],
                                            "onTableCellValueUpdate": [Function],
                                            "onTimestampClick": [Function],
                                            "selectedTableCellId": null,
                                            "shouldDisableActions": undefined,
                                          }
                                        }
                                      >
                                        <span>
                                          <Component />
                                        </span>
                                      </_default>
                                    </div>
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(42, 164, 168, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A nested header",
                                  },
                                ],
                                "rawTitle": "A nested header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 28,
                              "nestingLevel": 2,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="28"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(42, 164, 168, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A nested header",
                                    },
                                  ],
                                  "rawTitle": "A nested header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 28,
                                "nestingLevel": 2,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 40,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 40,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(42, 164, 168, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(42, 164, 168, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A nested header",
                                          },
                                        ],
                                        "rawTitle": "A nested header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 28,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(42, 164, 168, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A nested header",
                                            },
                                          ],
                                          "rawTitle": "A nested header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 28,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(42, 164, 168, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A nested header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A nested header
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A nested header",
                                          },
                                        ],
                                        "rawTitle": "A nested header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 28,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A nested header",
                                            },
                                          ],
                                          "rawTitle": "A nested header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 28,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(42, 164, 168, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A todo item",
                                  },
                                ],
                                "rawTitle": "A todo item",
                                "todoKeyword": "TODO",
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 29,
                              "nestingLevel": 2,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="29"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(42, 164, 168, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A todo item",
                                    },
                                  ],
                                  "rawTitle": "A todo item",
                                  "todoKeyword": "TODO",
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 29,
                                "nestingLevel": 2,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 40,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 40,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(42, 164, 168, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(42, 164, 168, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A todo item",
                                          },
                                        ],
                                        "rawTitle": "A todo item",
                                        "todoKeyword": "TODO",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 29,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(42, 164, 168, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A todo item",
                                            },
                                          ],
                                          "rawTitle": "A todo item",
                                          "todoKeyword": "TODO",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 29,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <span
                                        className="todo-keyword todo-keyword--todo"
                                        onClick={[Function]}
                                      >
                                        TODO
                                      </span>
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(42, 164, 168, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A todo item",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A todo item
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A todo item",
                                          },
                                        ],
                                        "rawTitle": "A todo item",
                                        "todoKeyword": "TODO",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 29,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A todo item",
                                            },
                                          ],
                                          "rawTitle": "A todo item",
                                          "todoKeyword": "TODO",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 29,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(42, 164, 168, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A finished todo item",
                                  },
                                ],
                                "rawTitle": "A finished todo item",
                                "todoKeyword": "DONE",
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 30,
                              "nestingLevel": 2,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="30"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(42, 164, 168, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A finished todo item",
                                    },
                                  ],
                                  "rawTitle": "A finished todo item",
                                  "todoKeyword": "DONE",
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 30,
                                "nestingLevel": 2,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 40,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 40,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(42, 164, 168, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(42, 164, 168, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A finished todo item",
                                          },
                                        ],
                                        "rawTitle": "A finished todo item",
                                        "todoKeyword": "DONE",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 30,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(42, 164, 168, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A finished todo item",
                                            },
                                          ],
                                          "rawTitle": "A finished todo item",
                                          "todoKeyword": "DONE",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 30,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <span
                                        className="todo-keyword todo-keyword--done"
                                        onClick={[Function]}
                                      >
                                        DONE
                                      </span>
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(42, 164, 168, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A finished todo item",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A finished todo item
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A finished todo item",
                                          },
                                        ],
                                        "rawTitle": "A finished todo item",
                                        "todoKeyword": "DONE",
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 30,
                                      "nestingLevel": 2,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A finished todo item",
                                            },
                                          ],
                                          "rawTitle": "A finished todo item",
                                          "todoKeyword": "DONE",
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 30,
                                        "nestingLevel": 2,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={true}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Another top level header",
                                  },
                                ],
                                "rawTitle": "Another top level header",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "Some description content",
                              "description": Immutable.List [
                                Immutable.Map {
                                  "type": "text",
                                  "contents": "Some description content",
                                },
                              ],
                              "opened": false,
                              "id": 31,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="31"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={true}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "Another top level header",
                                    },
                                  ],
                                  "rawTitle": "Another top level header",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "Some description content",
                                "description": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "Some description content",
                                  },
                                ],
                                "opened": false,
                                "id": 31,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={true}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Another top level header",
                                          },
                                        ],
                                        "rawTitle": "Another top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "Some description content",
                                      "description": Immutable.List [
                                        Immutable.Map {
                                          "type": "text",
                                          "contents": "Some description content",
                                        },
                                      ],
                                      "opened": false,
                                      "id": 31,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={true}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Another top level header",
                                            },
                                          ],
                                          "rawTitle": "Another top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "Some description content",
                                        "description": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Some description content",
                                          },
                                        ],
                                        "opened": false,
                                        "id": 31,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "Another top level header",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              Another top level header
                                            </span>
                                          </_default>
                                          ...
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Another top level header",
                                          },
                                        ],
                                        "rawTitle": "Another top level header",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "Some description content",
                                      "description": Immutable.List [
                                        Immutable.Map {
                                          "type": "text",
                                          "contents": "Some description content",
                                        },
                                      ],
                                      "opened": false,
                                      "id": 31,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "Another top level header",
                                            },
                                          ],
                                          "rawTitle": "Another top level header",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "Some description content",
                                        "description": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "Some description content",
                                          },
                                        ],
                                        "opened": false,
                                        "id": 31,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A header with tags                                              ",
                                  },
                                ],
                                "rawTitle": "A header with tags                                              ",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [
                                  "tag1",
                                  "tag2",
                                ],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 32,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="32"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A header with tags                                              ",
                                    },
                                  ],
                                  "rawTitle": "A header with tags                                              ",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 32,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with tags                                              ",
                                          },
                                        ],
                                        "rawTitle": "A header with tags                                              ",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [
                                          "tag1",
                                          "tag2",
                                        ],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 32,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with tags                                              ",
                                            },
                                          ],
                                          "rawTitle": "A header with tags                                              ",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [
                                            "tag1",
                                            "tag2",
                                          ],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 32,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A header with tags                                              ",
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A header with tags                                              
                                            </span>
                                          </_default>
                                        </span>
                                        <div>
                                          <div
                                            className="header-tag"
                                            key="tag1"
                                          >
                                            tag1
                                          </div>
                                          <div
                                            className="header-tag"
                                            key="tag2"
                                          >
                                            tag2
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with tags                                              ",
                                          },
                                        ],
                                        "rawTitle": "A header with tags                                              ",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [
                                          "tag1",
                                          "tag2",
                                        ],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 32,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with tags                                              ",
                                            },
                                          ],
                                          "rawTitle": "A header with tags                                              ",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [
                                            "tag1",
                                            "tag2",
                                          ],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 32,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                        <Connect(Header)
                          color="rgba(38, 143, 214, 1)"
                          hasContent={false}
                          header={
                            Immutable.Map {
                              "titleLine": Immutable.Map {
                                "title": Immutable.List [
                                  Immutable.Map {
                                    "type": "text",
                                    "contents": "A header with ",
                                  },
                                  Immutable.Map {
                                    "id": 33,
                                    "type": "link",
                                    "contents": Immutable.Map {
                                      "uri": "https://google.com",
                                      "title": "a link",
                                    },
                                  },
                                ],
                                "rawTitle": "A header with [[https://google.com][a link]]",
                                "todoKeyword": undefined,
                                "tags": Immutable.List [],
                              },
                              "rawDescription": "",
                              "description": Immutable.List [],
                              "opened": false,
                              "id": 34,
                              "nestingLevel": 1,
                              "planningItems": Immutable.List [],
                              "propertyListItems": Immutable.List [],
                            }
                          }
                          isSelected={false}
                          key="34"
                          onRef={[Function]}
                        >
                          <Header
                            base={
                              Object {
                                "activatePopup": [Function],
                                "clearModalStack": [Function],
                                "closePopup": [Function],
                                "hideLoadingMessage": [Function],
                                "loadStaticFile": [Function],
                                "popModalPage": [Function],
                                "pushModalPage": [Function],
                                "restoreBaseSettings": [Function],
                                "setAgendaDefaultDeadlineDelayUnit": [Function],
                                "setAgendaDefaultDeadlineDelayValue": [Function],
                                "setBulletStyle": [Function],
                                "setCustomKeybinding": [Function],
                                "setDisappearingLoadingMessage": [Function],
                                "setFontSize": [Function],
                                "setHasUnseenChangelog": [Function],
                                "setIsLoading": [Function],
                                "setLastSeenChangelogHeader": [Function],
                                "setLastViewedFile": [Function],
                                "setLoadingMessage": [Function],
                                "setShouldLiveSync": [Function],
                                "setShouldStoreSettingsInSyncBackend": [Function],
                                "setShouldTapTodoToAdvance": [Function],
                                "unloadStaticFile": [Function],
                              }
                            }
                            color="rgba(38, 143, 214, 1)"
                            focusedHeader={null}
                            hasContent={false}
                            header={
                              Immutable.Map {
                                "titleLine": Immutable.Map {
                                  "title": Immutable.List [
                                    Immutable.Map {
                                      "type": "text",
                                      "contents": "A header with ",
                                    },
                                    Immutable.Map {
                                      "id": 33,
                                      "type": "link",
                                      "contents": Immutable.Map {
                                        "uri": "https://google.com",
                                        "title": "a link",
                                      },
                                    },
                                  ],
                                  "rawTitle": "A header with [[https://google.com][a link]]",
                                  "todoKeyword": undefined,
                                  "tags": Immutable.List [],
                                },
                                "rawDescription": "",
                                "description": Immutable.List [],
                                "opened": false,
                                "id": 34,
                                "nestingLevel": 1,
                                "planningItems": Immutable.List [],
                                "propertyListItems": Immutable.List [],
                              }
                            }
                            inEditMode={false}
                            isFocused={false}
                            isSelected={false}
                            onRef={[Function]}
                            org={
                              Object {
                                "addHeader": [Function],
                                "addHeaderAndEdit": [Function],
                                "addNewPlanningItem": [Function],
                                "addNewTableColumn": [Function],
                                "addNewTableRow": [Function],
                                "advanceCheckboxState": [Function],
                                "advanceTodoState": [Function],
                                "applyOpennessState": [Function],
                                "clearPendingCapture": [Function],
                                "displayFile": [Function],
                                "enterEditMode": [Function],
                                "exitEditMode": [Function],
                                "focusHeader": [Function],
                                "insertCapture": [Function],
                                "insertPendingCapture": [Function],
                                "moveHeaderDown": [Function],
                                "moveHeaderLeft": [Function],
                                "moveHeaderRight": [Function],
                                "moveHeaderUp": [Function],
                                "moveSubtreeLeft": [Function],
                                "moveSubtreeRight": [Function],
                                "moveTableColumnLeft": [Function],
                                "moveTableColumnRight": [Function],
                                "moveTableRowDown": [Function],
                                "moveTableRowUp": [Function],
                                "noOp": [Function],
                                "openHeader": [Function],
                                "removeHeader": [Function],
                                "removeTableColumn": [Function],
                                "removeTableRow": [Function],
                                "reorderPropertyList": [Function],
                                "reorderTags": [Function],
                                "selectHeader": [Function],
                                "selectHeaderAndOpenParents": [Function],
                                "selectNextSiblingHeader": [Function],
                                "selectNextVisibleHeader": [Function],
                                "selectPreviousVisibleHeader": [Function],
                                "setDirty": [Function],
                                "setHeaderTags": [Function],
                                "setLastSyncAt": [Function],
                                "setOrgFileErrorMessage": [Function],
                                "setSelectedTableCellId": [Function],
                                "stopDisplayingFile": [Function],
                                "sync": [Function],
                                "toggleHeaderOpened": [Function],
                                "unfocusHeader": [Function],
                                "updateHeaderDescription": [Function],
                                "updateHeaderTitle": [Function],
                                "updatePlanningItemTimestamp": [Function],
                                "updatePropertyListItems": [Function],
                                "updateTableCellValue": [Function],
                                "updateTimestampWithId": [Function],
                              }
                            }
                          >
                            <Motion
                              onRest={[Function]}
                              style={
                                Object {
                                  "heightFactor": 1,
                                  "marginLeft": Object {
                                    "damping": 26,
                                    "precision": 0.01,
                                    "stiffness": 300,
                                    "val": 0,
                                  },
                                  "paddingLeft": 20,
                                }
                              }
                            >
                              <div
                                className="header"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseOut={[Function]}
                                onMouseUp={[Function]}
                                onTouchCancel={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "marginLeft": 0,
                                    "paddingLeft": 20,
                                  }
                                }
                              >
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": 0,
                                    }
                                  }
                                >
                                  <div
                                    className="left-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": 0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-check swipe-action-container__icon swipe-action-container__icon--left"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <Motion
                                  style={
                                    Object {
                                      "backgroundColorFactor": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 300,
                                        "val": 0,
                                      },
                                      "width": -0,
                                    }
                                  }
                                >
                                  <div
                                    className="right-swipe-action-container"
                                    style={
                                      Object {
                                        "backgroundColor": "rgba(211, 211, 211, 1)",
                                        "width": -0,
                                      }
                                    }
                                  >
                                    <i
                                      className="fas fa-times swipe-action-container__icon swipe-action-container__icon--right"
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                    />
                                  </div>
                                </Motion>
                                <div
                                  className="header__bullet"
                                  style={
                                    Object {
                                      "color": "rgba(38, 143, 214, 1)",
                                      "marginLeft": -16,
                                    }
                                  }
                                >
                                  *
                                </div>
                                <Connect(TitleLine)
                                  color="rgba(38, 143, 214, 1)"
                                  hasContent={false}
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with ",
                                          },
                                          Immutable.Map {
                                            "id": 33,
                                            "type": "link",
                                            "contents": Immutable.Map {
                                              "uri": "https://google.com",
                                              "title": "a link",
                                            },
                                          },
                                        ],
                                        "rawTitle": "A header with [[https://google.com][a link]]",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 34,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                  isSelected={false}
                                >
                                  <TitleLine
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    color="rgba(38, 143, 214, 1)"
                                    hasContent={false}
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with ",
                                            },
                                            Immutable.Map {
                                              "id": 33,
                                              "type": "link",
                                              "contents": Immutable.Map {
                                                "uri": "https://google.com",
                                                "title": "a link",
                                              },
                                            },
                                          ],
                                          "rawTitle": "A header with [[https://google.com][a link]]",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 34,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="title-line"
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "width": 0,
                                        }
                                      }
                                    >
                                      <div>
                                        <span
                                          style={
                                            Object {
                                              "color": "rgba(38, 143, 214, 1)",
                                              "wordBreak": "break-word",
                                            }
                                          }
                                        >
                                          <_default
                                            parts={
                                              Immutable.List [
                                                Immutable.Map {
                                                  "type": "text",
                                                  "contents": "A header with ",
                                                },
                                                Immutable.Map {
                                                  "id": 33,
                                                  "type": "link",
                                                  "contents": Immutable.Map {
                                                    "uri": "https://google.com",
                                                    "title": "a link",
                                                  },
                                                },
                                              ]
                                            }
                                            subPartDataAndHandlers={
                                              Object {
                                                "onTimestampClick": [Function],
                                                "shouldDisableActions": undefined,
                                              }
                                            }
                                          >
                                            <span>
                                              A header with 
                                              <a
                                                href="https://google.com"
                                                key="33"
                                                rel="noopener noreferrer"
                                                target="_blank"
                                              >
                                                a link
                                              </a>
                                            </span>
                                          </_default>
                                        </span>
                                      </div>
                                    </div>
                                  </TitleLine>
                                </Connect(TitleLine)>
                                <UnmountClosed
                                  isOpened={false}
                                  springConfig={
                                    Object {
                                      "stiffness": 300,
                                    }
                                  }
                                  style={
                                    Object {
                                      "marginRight": -0,
                                    }
                                  }
                                />
                                <Connect(HeaderContent)
                                  header={
                                    Immutable.Map {
                                      "titleLine": Immutable.Map {
                                        "title": Immutable.List [
                                          Immutable.Map {
                                            "type": "text",
                                            "contents": "A header with ",
                                          },
                                          Immutable.Map {
                                            "id": 33,
                                            "type": "link",
                                            "contents": Immutable.Map {
                                              "uri": "https://google.com",
                                              "title": "a link",
                                            },
                                          },
                                        ],
                                        "rawTitle": "A header with [[https://google.com][a link]]",
                                        "todoKeyword": undefined,
                                        "tags": Immutable.List [],
                                      },
                                      "rawDescription": "",
                                      "description": Immutable.List [],
                                      "opened": false,
                                      "id": 34,
                                      "nestingLevel": 1,
                                      "planningItems": Immutable.List [],
                                      "propertyListItems": Immutable.List [],
                                    }
                                  }
                                >
                                  <HeaderContent
                                    base={
                                      Object {
                                        "activatePopup": [Function],
                                        "clearModalStack": [Function],
                                        "closePopup": [Function],
                                        "hideLoadingMessage": [Function],
                                        "loadStaticFile": [Function],
                                        "popModalPage": [Function],
                                        "pushModalPage": [Function],
                                        "restoreBaseSettings": [Function],
                                        "setAgendaDefaultDeadlineDelayUnit": [Function],
                                        "setAgendaDefaultDeadlineDelayValue": [Function],
                                        "setBulletStyle": [Function],
                                        "setCustomKeybinding": [Function],
                                        "setDisappearingLoadingMessage": [Function],
                                        "setFontSize": [Function],
                                        "setHasUnseenChangelog": [Function],
                                        "setIsLoading": [Function],
                                        "setLastSeenChangelogHeader": [Function],
                                        "setLastViewedFile": [Function],
                                        "setLoadingMessage": [Function],
                                        "setShouldLiveSync": [Function],
                                        "setShouldStoreSettingsInSyncBackend": [Function],
                                        "setShouldTapTodoToAdvance": [Function],
                                        "unloadStaticFile": [Function],
                                      }
                                    }
                                    header={
                                      Immutable.Map {
                                        "titleLine": Immutable.Map {
                                          "title": Immutable.List [
                                            Immutable.Map {
                                              "type": "text",
                                              "contents": "A header with ",
                                            },
                                            Immutable.Map {
                                              "id": 33,
                                              "type": "link",
                                              "contents": Immutable.Map {
                                                "uri": "https://google.com",
                                                "title": "a link",
                                              },
                                            },
                                          ],
                                          "rawTitle": "A header with [[https://google.com][a link]]",
                                          "todoKeyword": undefined,
                                          "tags": Immutable.List [],
                                        },
                                        "rawDescription": "",
                                        "description": Immutable.List [],
                                        "opened": false,
                                        "id": 34,
                                        "nestingLevel": 1,
                                        "planningItems": Immutable.List [],
                                        "propertyListItems": Immutable.List [],
                                      }
                                    }
                                    inEditMode={false}
                                    inTableEditMode={false}
                                    isSelected={false}
                                    org={
                                      Object {
                                        "addHeader": [Function],
                                        "addHeaderAndEdit": [Function],
                                        "addNewPlanningItem": [Function],
                                        "addNewTableColumn": [Function],
                                        "addNewTableRow": [Function],
                                        "advanceCheckboxState": [Function],
                                        "advanceTodoState": [Function],
                                        "applyOpennessState": [Function],
                                        "clearPendingCapture": [Function],
                                        "displayFile": [Function],
                                        "enterEditMode": [Function],
                                        "exitEditMode": [Function],
                                        "focusHeader": [Function],
                                        "insertCapture": [Function],
                                        "insertPendingCapture": [Function],
                                        "moveHeaderDown": [Function],
                                        "moveHeaderLeft": [Function],
                                        "moveHeaderRight": [Function],
                                        "moveHeaderUp": [Function],
                                        "moveSubtreeLeft": [Function],
                                        "moveSubtreeRight": [Function],
                                        "moveTableColumnLeft": [Function],
                                        "moveTableColumnRight": [Function],
                                        "moveTableRowDown": [Function],
                                        "moveTableRowUp": [Function],
                                        "noOp": [Function],
                                        "openHeader": [Function],
                                        "removeHeader": [Function],
                                        "removeTableColumn": [Function],
                                        "removeTableRow": [Function],
                                        "reorderPropertyList": [Function],
                                        "reorderTags": [Function],
                                        "selectHeader": [Function],
                                        "selectHeaderAndOpenParents": [Function],
                                        "selectNextSiblingHeader": [Function],
                                        "selectNextVisibleHeader": [Function],
                                        "selectPreviousVisibleHeader": [Function],
                                        "setDirty": [Function],
                                        "setHeaderTags": [Function],
                                        "setLastSyncAt": [Function],
                                        "setOrgFileErrorMessage": [Function],
                                        "setSelectedTableCellId": [Function],
                                        "stopDisplayingFile": [Function],
                                        "sync": [Function],
                                        "toggleHeaderOpened": [Function],
                                        "unfocusHeader": [Function],
                                        "updateHeaderDescription": [Function],
                                        "updateHeaderTitle": [Function],
                                        "updatePlanningItemTimestamp": [Function],
                                        "updatePropertyListItems": [Function],
                                        "updateTableCellValue": [Function],
                                        "updateTimestampWithId": [Function],
                                      }
                                    }
                                    selectedTableCellId={null}
                                  >
                                    <div />
                                  </HeaderContent>
                                </Connect(HeaderContent)>
                              </div>
                            </Motion>
                          </Header>
                        </Connect(Header)>
                      </div>
                    </HeaderList>
                  </Connect(HeaderList)>
                  <Connect(ActionDrawer)>
                    <ActionDrawer
                      base={
                        Object {
                          "activatePopup": [Function],
                          "clearModalStack": [Function],
                          "closePopup": [Function],
                          "hideLoadingMessage": [Function],
                          "loadStaticFile": [Function],
                          "popModalPage": [Function],
                          "pushModalPage": [Function],
                          "restoreBaseSettings": [Function],
                          "setAgendaDefaultDeadlineDelayUnit": [Function],
                          "setAgendaDefaultDeadlineDelayValue": [Function],
                          "setBulletStyle": [Function],
                          "setCustomKeybinding": [Function],
                          "setDisappearingLoadingMessage": [Function],
                          "setFontSize": [Function],
                          "setHasUnseenChangelog": [Function],
                          "setIsLoading": [Function],
                          "setLastSeenChangelogHeader": [Function],
                          "setLastViewedFile": [Function],
                          "setLoadingMessage": [Function],
                          "setShouldLiveSync": [Function],
                          "setShouldStoreSettingsInSyncBackend": [Function],
                          "setShouldTapTodoToAdvance": [Function],
                          "unloadStaticFile": [Function],
                        }
                      }
                      capture={
                        Object {
                          "addNewEmptyCaptureTemplate": [Function],
                          "addNewTemplateHeaderPath": [Function],
                          "addNewTemplateOrgFileAvailability": [Function],
                          "deleteTemplate": [Function],
                          "removeTemplateHeaderPath": [Function],
                          "removeTemplateOrgFileAvailability": [Function],
                          "reorderCaptureTemplate": [Function],
                          "restoreCaptureSettings": [Function],
                          "updateTemplateFieldPathValue": [Function],
                        }
                      }
                      captureTemplates={Array []}
                      inEditMode={false}
                      isFocusedHeaderActive={false}
                      org={
                        Object {
                          "addHeader": [Function],
                          "addHeaderAndEdit": [Function],
                          "addNewPlanningItem": [Function],
                          "addNewTableColumn": [Function],
                          "addNewTableRow": [Function],
                          "advanceCheckboxState": [Function],
                          "advanceTodoState": [Function],
                          "applyOpennessState": [Function],
                          "clearPendingCapture": [Function],
                          "displayFile": [Function],
                          "enterEditMode": [Function],
                          "exitEditMode": [Function],
                          "focusHeader": [Function],
                          "insertCapture": [Function],
                          "insertPendingCapture": [Function],
                          "moveHeaderDown": [Function],
                          "moveHeaderLeft": [Function],
                          "moveHeaderRight": [Function],
                          "moveHeaderUp": [Function],
                          "moveSubtreeLeft": [Function],
                          "moveSubtreeRight": [Function],
                          "moveTableColumnLeft": [Function],
                          "moveTableColumnRight": [Function],
                          "moveTableRowDown": [Function],
                          "moveTableRowUp": [Function],
                          "noOp": [Function],
                          "openHeader": [Function],
                          "removeHeader": [Function],
                          "removeTableColumn": [Function],
                          "removeTableRow": [Function],
                          "reorderPropertyList": [Function],
                          "reorderTags": [Function],
                          "selectHeader": [Function],
                          "selectHeaderAndOpenParents": [Function],
                          "selectNextSiblingHeader": [Function],
                          "selectNextVisibleHeader": [Function],
                          "selectPreviousVisibleHeader": [Function],
                          "setDirty": [Function],
                          "setHeaderTags": [Function],
                          "setLastSyncAt": [Function],
                          "setOrgFileErrorMessage": [Function],
                          "setSelectedTableCellId": [Function],
                          "stopDisplayingFile": [Function],
                          "sync": [Function],
                          "toggleHeaderOpened": [Function],
                          "unfocusHeader": [Function],
                          "updateHeaderDescription": [Function],
                          "updateHeaderTitle": [Function],
                          "updatePlanningItemTimestamp": [Function],
                          "updatePropertyListItems": [Function],
                          "updateTableCellValue": [Function],
                          "updateTimestampWithId": [Function],
                        }
                      }
                      path="/some/test/file"
                      selectedHeaderId={27}
                      selectedTableCellId={null}
                    >
                      <div
                        className="action-drawer-container nice-scroll"
                      >
                        <ActionButton
                          iconName="cloud"
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          subIconName="sync-alt"
                          tooltip="Sync changes"
                        >
                          <button
                            className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud action-drawer__btn--with-sub-icon"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                            title="Sync changes"
                          >
                            <i
                              className="fas fa-xs fa-sync-alt action-drawer__btn__sub-icon"
                            />
                          </button>
                        </ActionButton>
                        <Motion
                          style={
                            Object {
                              "bottomRowYOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "centerXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "firstColumnXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "secondColumnXOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                              "topRowYOffset": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                            }
                          }
                        >
                          <div
                            className="action-drawer__arrow-buttons-container"
                            style={
                              Object {
                                "left": 0,
                              }
                            }
                          >
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-up"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header up"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-up"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                  }
                                }
                                title="Move header up"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-down"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header down"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-down"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                  }
                                }
                                title="Move header down"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-left"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                  "right": 0,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header left"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-left"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                    "right": 0,
                                  }
                                }
                                title="Move header left"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="arrow-right"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "left": 0,
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Move header right"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-arrow-right"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "left": 0,
                                    "opacity": 1,
                                  }
                                }
                                title="Move header right"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="chevron-left"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "opacity": 1,
                                  "right": 0,
                                }
                              }
                              tooltip="Move entire subtree left"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-chevron-left"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "opacity": 1,
                                    "right": 0,
                                  }
                                }
                                title="Move entire subtree left"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__arrow-button"
                              iconName="chevron-right"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "bottom": 0,
                                  "boxShadow": "none",
                                  "left": 0,
                                  "opacity": 1,
                                }
                              }
                              tooltip="Move entire subtree right"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__arrow-button fas fa-lg fa-chevron-right"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "boxShadow": "none",
                                    "left": 0,
                                    "opacity": 1,
                                  }
                                }
                                title="Move entire subtree right"
                              />
                            </ActionButton>
                            <ActionButton
                              additionalClassName="action-drawer__main-arrow-button"
                              iconName="arrows-alt"
                              isDisabled={false}
                              onClick={[Function]}
                              onRef={
                                Object {
                                  "current": <button
                                    class="btn btn--circle action-drawer__btn action-drawer__main-arrow-button fas fa-lg fa-arrows-alt"
                                    style="opacity: 1;"
                                    title="Show movement buttons"
                                  />,
                                }
                              }
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                              subIconName={null}
                              tooltip="Show movement buttons"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn action-drawer__main-arrow-button fas fa-lg fa-arrows-alt"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "opacity": 1,
                                  }
                                }
                                title="Show movement buttons"
                              />
                            </ActionButton>
                          </div>
                        </Motion>
                        <ActionButton
                          iconName="calendar-alt"
                          isDisabled={false}
                          onClick={[Function]}
                          style={
                            Object {
                              "opacity": 1,
                            }
                          }
                          tooltip="Show agenda"
                        >
                          <button
                            className="btn btn--circle action-drawer__btn fas fa-lg fa-calendar-alt"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                            title="Show agenda"
                          />
                        </ActionButton>
                        <Motion
                          style={
                            Object {
                              "bottom": Object {
                                "damping": 26,
                                "precision": 0.01,
                                "stiffness": 300,
                                "val": 0,
                              },
                            }
                          }
                        >
                          <div
                            className="action-drawer__capture-buttons-container"
                          >
                            <ActionButton
                              iconName="list-ul"
                              isDisabled={false}
                              onClick={[Function]}
                              style={
                                Object {
                                  "opacity": 1,
                                  "position": "relative",
                                  "zIndex": 1,
                                }
                              }
                              tooltip="Show capture templates"
                            >
                              <button
                                className="btn btn--circle action-drawer__btn fas fa-lg fa-list-ul"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "opacity": 1,
                                    "position": "relative",
                                    "zIndex": 1,
                                  }
                                }
                                title="Show capture templates"
                              />
                            </ActionButton>
                          </div>
                        </Motion>
                      </div>
                    </ActionDrawer>
                  </Connect(ActionDrawer)>
                </div>
              </div>
            </FocusTrap>
          </HotKeys>
        </OrgFile>
      </Connect(OrgFile)>
    </Provider>
  </Router>
</MemoryRouter>
`;
